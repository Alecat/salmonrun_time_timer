!function(e){var t={};function n(i){if(t[i])return t[i].exports;var s=t[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="./main.js")}({"../node_modules/get-json-data/index.js":
/*!**********************************************!*\
  !*** ../node_modules/get-json-data/index.js ***!
  \**********************************************/
/*! no static exports found */function(e,t){!function(){var t=function(e,t,n){var i;if(XMLHttpRequest)i=new XMLHttpRequest;else if(ActiveXObject)try{i=new ActiveXObject("Msxml2.XMLHTTP")}catch(e){try{i=new ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}if(!i)return t.call(this,"Giving up :( Cannot create an XMLHTTP instance",null),!1;i.onreadystatechange=function(){if(4===i.readyState)if(i.status>=200&&i.status<400){var e=i.responseText;if(!(!(!n||!n.hasOwnProperty("raw"))&&n.raw))try{e=JSON.parse(e)}catch(e){return void t.call(this,e,null)}t.call(this,null,e)}else t.call(this,new Error("There was a problem with the request"),null)};var s=n&&n.method?n.method:"GET";if("GET"==s){var o=[];if(n&&n.params&&"object"==typeof n.params)for(var a in n.params)o.push(a+"="+encodeURIComponent(n.params[a]));e=o.length>0?e+"?"+o.join("&"):e,i.open("GET",e),i.send()}else if("POST"==s){var r=n&&n.data?n.data:n.params?n.params:{};i.open("POST",e),i.send(JSON.stringify(r))}return i};void 0!==e&&e.exports&&(e.exports=t),"undefined"!=typeof window&&(window.getJSONData=t)}()},"./config.js":
/*!*******************!*\
  !*** ./config.js ***!
  \*******************/
/*! exports provided: default */function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}n.r(t);var s=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.listener=t,this.scheme=n}return function(e,t,n){t&&i(e.prototype,t),n&&i(e,n)}(e,[{key:"load",value:function(){var e=this;this.scheme;Object.keys(this.scheme).forEach(function(t){var n=e.scheme[t],i=n.type,s=localStorage[t];void 0!==s&&null!==s||(s=n.default),i===Boolean?e[t]="true"==s||1==s:i===Number?e[t]=Number(s):i===String?e[t]=String(s):e[t]=s},this),this.listener&&this.listener(this)}},{key:"save",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;t?Object.keys(t).forEach(function(n){localStorage[n]=t[n],e[n]=t[n]}):Object.keys(this.scheme).forEach(function(t){localStorage[t]=e[t]})}}]),e}();t.default=s},"./date_formatter.js":
/*!***************************!*\
  !*** ./date_formatter.js ***!
  \***************************/
/*! exports provided: default */function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}n.r(t);var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return function(e,t,n){t&&i(e.prototype,t),n&&i(e,n)}(e,[{key:"getMonthText",value:function(e){var t=e.getMonth()+1,n=e.getDate();t<10&&(t="0"+t),n<10&&(n="0"+n);var i=e.getHours(),s=e.getMinutes(),o=e.getSeconds();return i<10&&(i="0"+i),s<10&&(s="0"+s),o<10&&(o="0"+o),t+"/"+n+" "+i+":"+s+":"+o}},{key:"getMinText",value:function(e){var t=e.getMinutes(),n=e.getSeconds(),i=e.getMilliseconds();return t<10&&(t="0"+t),n<10&&(n="0"+n),i<10?i="00"+i:i<100&&(i="0"+i),t+":"+n+"."+i}}]),e}();t.default=s},"./main.js":
/*!*****************!*\
  !*** ./main.js ***!
  \*****************/
/*! no exports provided */function(e,t,n){"use strict";n.r(t);var i=n(/*! ./salmonrun_time_timer */"./salmonrun_time_timer.js"),s=n(/*! ./date_formatter */"./date_formatter.js"),o=n(/*! ./time_offset */"./time_offset.js"),a=n(/*! ./config */"./config.js");function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var l=new s.default,f=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.time_offset=new o.default,this.timer=new i.default(this.time_offset),this.config=new a.default(this.on_load.bind(this),{mode_friend:{type:Boolean,default:!1},mode_frequency_update:{type:Boolean,default:!1}}),this.elmEta=document.getElementById("eta"),this.elmEtaArea=document.getElementById("eta_area"),this.elmEtaLabel=document.getElementById("eta_label"),this.elmOffset=document.getElementById("offset"),this.elmModeFriend=document.getElementById("mode_friend"),this.elmModeFriend.onclick=this.on_change_modeFriend.bind(this),this.elmModeFrequencyUpdate=document.getElementById("mode_frequency_update"),this.elmModeFrequencyUpdate.onclick=this.on_change_modeFrequencyUpdate.bind(this),this.config.load(),this.update(!0)}return function(e,t,n){t&&r(e.prototype,t),n&&r(e,n)}(e,[{key:"calc_eta",value:function(){this.list=this.timer.listup_next_STT();var e=this.time_offset.get_time(),t=this.list[0]-e;this.eta=new Date(t)}},{key:"update_eta",value:function(){var e=l.getMinText(this.eta);this.elmEta.innerHTML=e;var t="ST";if(0!=this.time_offset.offset_friend&&(t+="(フレ部屋)"),t+="まで",this.elmEtaLabel.innerHTML=t,this.time_offset.offset_jst){var n="補正: ";this.time_offset.offset_jst<0?n+="-"+l.getMinText(new Date(-this.time_offset.offset_jst)):n+="+"+l.getMinText(new Date(this.time_offset.offset_jst)),0!=this.time_offset.offset_friend&&(n+=" (2秒遅れ)"),this.elmOffset.innerHTML=n}else this.elmOffset.innerHTML="時刻合わせ中 ..."}},{key:"update_list",value:function(){for(var e in this.list){var t=document.getElementById("stt-item-"+(Number(e)+1)),n=l.getMonthText(this.list[e]);t.innerHTML=n}}},{key:"update",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.calc_eta(),this.update_eta(),this.update_list();var t=this.config.mode_frequency_update;if(e){this.timeout&&clearTimeout(this.timeout);var n=1e3;(t||this.eta<6e4)&&(n=50),this.timeout=setTimeout(this.update.bind(this,!0),n)}}},{key:"on_load",value:function(e){this.elmModeFriend.checked=e.mode_friend,this.elmModeFrequencyUpdate.checked=e.mode_frequency_update,this.on_change_modeFriend(),this.on_change_modeFrequencyUpdate()}},{key:"on_change_modeFriend",value:function(){var e=this.elmModeFriend.checked;this.elmEtaArea.classList.remove("mdl-color--grey-800"),this.elmEtaArea.classList.remove("mdl-color--green-900"),this.elmEtaLabel.classList.remove("mdl-color-text--grey-600"),this.elmEtaLabel.classList.remove("mdl-color-text--yellow-600"),this.elmOffset.classList.remove("mdl-color-text--grey-600"),this.elmOffset.classList.remove("mdl-color-text--yellow-600"),e?(this.time_offset.set_offset_friend(-2e3),this.elmEtaArea.classList.add("mdl-color--green-900"),this.elmEtaLabel.classList.add("mdl-color-text--yellow-600"),this.elmOffset.classList.add("mdl-color-text--yellow-600")):(this.time_offset.set_offset_friend(0),this.elmEtaArea.classList.add("mdl-color--grey-800"),this.elmEtaLabel.classList.add("mdl-color-text--grey-600"),this.elmOffset.classList.add("mdl-color-text--grey-600")),this.config.save({mode_friend:e}),this.update(!1)}},{key:"on_change_modeFrequencyUpdate",value:function(){var e=this.elmModeFrequencyUpdate.checked;this.config.save({mode_frequency_update:e}),this.update(!0)}}]),e}();window.onload=function(){new f}},"./salmonrun_time_timer.js":
/*!*********************************!*\
  !*** ./salmonrun_time_timer.js ***!
  \*********************************/
/*! exports provided: default */function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}n.r(t);var s=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.time_offset=t}return function(e,t,n){t&&i(e.prototype,t),n&&i(e,n)}(e,[{key:"listup_next_STT",value:function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Date.now(),n=[];e=this.time_offset?this.time_offset.get_time(t):new Date(t);for(var i=Math.floor((e.getMinutes()-2)/8)+1,s=e.getHours();n.length<7;){for(var o=i+1;o<=7&&n.length<7;++o){var a=2+8*(o-1),r=new Date(e);r.setHours(s),r.setMinutes(a),r.setSeconds(0),r.setMilliseconds(0),n.push(r)}i=0,s+=1}return n}}]),e}();t.default=s},"./time_offset.js":
/*!************************!*\
  !*** ./time_offset.js ***!
  \************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var i=n(/*! get-json-data */"../node_modules/get-json-data/index.js"),s=n.n(i);function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=["https://ntp-a1.nict.go.jp/cgi-bin/json","https://ntp-b1.nict.go.jp/cgi-bin/json","https://ntp-a4.nict.go.jp/cgi-bin/json"],r=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.offset_jst=0,this.set_offset_friend(t),this.get_offset_jst()}return function(e,t,n){t&&o(e.prototype,t),n&&o(e,n)}(e,[{key:"get_time",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Date.now(),t=0;return this.offset_jst&&(t+=this.offset_jst),this.offset_friend&&(t+=this.offset_friend),new Date(e+t)}},{key:"set_offset_friend",value:function(e){this.offset_friend=e}},{key:"get_offset_jst",value:function(){var e=this;this.results=new Array;var t=Math.floor(3*Math.random()),n=a[t];s()(n+"?"+(new Date).getTime()/1e3,function(t,n){if(!t){var i=new Date;n.st&&n.it&&n.leap&&n.next&&n.step&&(n.rt=i.getTime(),n.it=1e3*Number(n.it),n.st=1e3*Number(n.st),n.lb=n.it-16-n.st,n.ub=n.rt+16-n.st,e.offset_jst=-(n.lb+n.ub)/2)}})}}]),e}();t.default=r}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,